// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2084.CMonster2017;
import org.usfirst.frc2084.CMonster2017.PID.DistancePID;
import org.usfirst.frc2084.CMonster2017.PID.HeadingPID;

import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.I2C;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveBaseLeftTalon1;
    public static Encoder driveBaseLeftEncoder;
    public static PIDController driveBaseLeftPIDController1;
    public static SpeedController driveBaseRightTanlon1;
    public static Encoder driveBaseRightEncoder;
    public static PIDController driveBaseRightPIDController1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static DistancePID distancePID = new DistancePID();
    public static HeadingPID headingPID = new HeadingPID();
    public static double AverageDistance; //the average of right and left distance from encoders
    
    
 // There are 2 driver motors on each side of the robot. 
    // Here are the declarations.
    public static SpeedController driveBasePIDLeftTalon2;
	public static SpeedController driveBasePIDRightTanlon2;
	public static PIDController driveBasePIDLeftPIDController2;
	public static PIDController driveBasePIDRightPIDController2;
	
	public static AHRS ahrs;  //navX 
	

    /**.0
     * Wheel diameter in meters.
     */
    public static final double DRIVE_SUBSYSTEM_WHEEL_DIAMETER = 0.184;
    public static final double DRIVE_SUBSYSTEM_WHEELBASE_WIDTH = 0.5;
    public static final double DRIVE_SUBSYSTEM_BELT_RATIO = 42 / 39;
    public static final double DRIVE_SUBYSTEM_ENCODER_DISTANCE_PER_PULSE =
            (Math.PI * DRIVE_SUBSYSTEM_WHEEL_DIAMETER) / 2048 / DRIVE_SUBSYSTEM_BELT_RATIO;
	
    
    /**
     * The navX Micro used for autonomous and aiming
     */
    

    

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseLeftTalon1 = new Talon(0);
        LiveWindow.addActuator("DriveBase", "LeftTalon1", (Talon) driveBaseLeftTalon1);
        
        driveBaseLeftEncoder = new Encoder(19, 20, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveBase", "LeftEncoder", driveBaseLeftEncoder);
        driveBaseLeftEncoder.setDistancePerPulse(1.0);
        driveBaseLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveBaseLeftPIDController1 = new PIDController(0.1, 0.0, 0.0, 0.0, driveBaseLeftEncoder, driveBaseLeftTalon1, 0.02);
        LiveWindow.addActuator("DriveBase", "LeftPIDController1", driveBaseLeftPIDController1);
        driveBaseLeftPIDController1.setContinuous(false);
        driveBaseLeftPIDController1.setAbsoluteTolerance(0.2);

        driveBaseLeftPIDController1.setInputRange(-1.0, 1.0);
        driveBaseLeftPIDController1.setOutputRange(-1.0, 1.0);
        driveBaseRightTanlon1 = new Talon(3);
        LiveWindow.addActuator("DriveBase", "RightTanlon1", (Talon) driveBaseRightTanlon1);
        
        driveBaseRightEncoder = new Encoder(22, 23, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveBase", "RightEncoder", driveBaseRightEncoder);
        driveBaseRightEncoder.setDistancePerPulse(1.0);
        driveBaseRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveBaseRightPIDController1 = new PIDController(0.1, 0.0, 0.0, 0.0, driveBaseRightEncoder, driveBaseRightTanlon1, 0.02);
        LiveWindow.addActuator("DriveBase", "RightPIDController1", driveBaseRightPIDController1);
        driveBaseRightPIDController1.setContinuous(false);
        driveBaseRightPIDController1.setAbsoluteTolerance(0.2);

        driveBaseRightPIDController1.setInputRange(-1.0, 1.0);
        driveBaseRightPIDController1.setOutputRange(-1.0, 1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        // There are 2 driver motors on each side of the robot. 
        // Here is the mapping for the left.
        driveBasePIDLeftTalon2 = new Talon(1); //PWM output port on roboRio
        driveBasePIDLeftPIDController2 = new PIDController(0.1, 0.0, 0.0, 0.0, driveBaseLeftEncoder, driveBasePIDLeftTalon2, 0.02);
        driveBasePIDLeftPIDController2.setContinuous(false);
        driveBasePIDLeftPIDController2.setAbsoluteTolerance(0.2);
        driveBasePIDLeftPIDController2.setInputRange(-1.0, 1.0);
        driveBasePIDLeftPIDController2.setOutputRange(-1.0, 1.0);
       //mapping for right.
        driveBasePIDRightTanlon2 = new Talon(2);
        driveBasePIDRightPIDController2 = new PIDController(0.1, 0.0, 0.0, 0.0, driveBaseRightEncoder, driveBasePIDRightTanlon2, 0.02);
        driveBasePIDRightPIDController2.setContinuous(false);
        driveBasePIDRightPIDController2.setAbsoluteTolerance(0.2);
        driveBasePIDRightPIDController2.setInputRange(-1.0, 1.0);
        driveBasePIDRightPIDController2.setOutputRange(-1.0, 1.0);
       
        
        ahrs = new AHRS(I2C.Port.kMXP, (byte) 100);
        LiveWindow.addSensor("Drive Subsystem", "navX", ahrs);
        
        driveBaseLeftEncoder.setDistancePerPulse(DRIVE_SUBYSTEM_ENCODER_DISTANCE_PER_PULSE);
        driveBaseRightEncoder.setDistancePerPulse(DRIVE_SUBYSTEM_ENCODER_DISTANCE_PER_PULSE);
        
      
	
       
       
    }
}
