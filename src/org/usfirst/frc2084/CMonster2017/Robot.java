// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2084.CMonster2017;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2084.CMonster2017.commands.*;
import org.usfirst.frc2084.CMonster2017.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

// Note: FRC team 3946 and team 1073 have very good example code on github.

public class Robot extends IterativeRobot {

	Command autonomousCommand;
	SendableChooser autoChooser; // varaible that allows you to choose between
									// different autonomouses from the
									// SmartDashboard

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static GearBase gearBase;
    public static ClimberBase climberBase;
    public static IntakeBase intakeBase;
    public static LifterBase lifterBase;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// autogenerated code declares all the different subsystems

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */

	public void robotInit() {
		RobotMap.init();

		autoChooser = new SendableChooser();
		autoChooser.addDefault("MiddleProgram", new MoveForward());
		autoChooser.addObject("LeftSideAuto", new AutonomousLeftSide());
		autoChooser.addObject("RightSideAuto", new AutonomousRightSide());
		SmartDashboard.putData("Autonomous Mode Chooser", autoChooser);
		// create variable autoChooser and create different instances of the
		// variable so you
		// can select different autonomouses through the SmartDashboard

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        gearBase = new GearBase();
        climberBase = new ClimberBase();
        intakeBase = new IntakeBase();
        lifterBase = new LifterBase();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		autonomousCommand = new AutonomousCommand();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		CameraServer.getInstance().startAutomaticCapture();
		// starts vision stream
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {
		Robot.driveBase.DisableDriveBase();
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// Scheduler.getInstance().removeAll();
		// resets distances for the next autonomous command, so values don't
		// carry over
		// through different autos

		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			// autonomousCommand.start();
			// if the autonomousCommand doesn't equal null

			autonomousCommand = (Command) autoChooser.getSelected(); // run the
																		// selected
																		// autonomous
		autonomousCommand.start();

	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
