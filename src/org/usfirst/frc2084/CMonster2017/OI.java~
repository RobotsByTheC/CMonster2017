// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2084.CMonster2017;

import org.usfirst.frc2084.CMonster2017.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static JoystickButton oG;
    public static JoystickButton cG;
    public static JoystickButton sC;
    public static JoystickButton stC;
    public static JoystickButton sL;
    public static JoystickButton stL;
    public static Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        stL = new JoystickButton(joystick1, 5);
        stL.whenPressed(new StopLifter());
        sL = new JoystickButton(joystick1, 4);
        sL.whenPressed(new StartLifter());
        stC = new JoystickButton(joystick1, 3);
        stC.whenReleased(new StopClimber());
        sC = new JoystickButton(joystick1, 3);
        sC.whileHeld(new StartClimber());
        cG = new JoystickButton(joystick1, 2);
        cG.whenPressed(new CloseGear());
        oG = new JoystickButton(joystick1, 1);
        oG.whenPressed(new OpenGear());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveWithJoystick", new DriveWithJoystick());
        SmartDashboard.putData("OpenGear", new OpenGear());
        SmartDashboard.putData("CloseGear", new CloseGear());
        SmartDashboard.putData("StartClimber", new StartClimber());
        SmartDashboard.putData("StopClimber", new StopClimber());
        SmartDashboard.putData("StartLifter", new StartLifter());
        SmartDashboard.putData("StopLifter", new StopLifter());
        SmartDashboard.putData("MoveForward", new MoveForward());
        SmartDashboard.putData("TurnRight", new TurnRight());
        SmartDashboard.putData("TurnLeft", new TurnLeft());
        SmartDashboard.putData("DropPoint", new DropPoint());
        SmartDashboard.putData("AutonomousLeftSide", new AutonomousLeftSide());
        SmartDashboard.putData("AutonomousRightSide", new AutonomousRightSide());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

